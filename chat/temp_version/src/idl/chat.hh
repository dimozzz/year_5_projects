// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __chat_hh__
#define __chat_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_chat
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_chat
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_chat
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE Chat

_CORBA_MODULE_BEG

#ifndef __Chat_mUser__
#define __Chat_mUser__

  class User;
  class _objref_User;
  class _impl_User;
  
  typedef _objref_User* User_ptr;
  typedef User_ptr UserRef;

  class User_Helper {
  public:
    typedef User_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_User, User_Helper> User_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_User,User_Helper > User_out;

#endif

  // interface User
  class User {
  public:
    // Declarations for this interface type.
    typedef User_ptr _ptr_type;
    typedef User_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_User :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    void receive(const char* author, const char* message);

    inline _objref_User()  { _PR_setobj(0); }  // nil
    _objref_User(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_User();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_User(const _objref_User&);
    _objref_User& operator = (const _objref_User&);
    // not implemented

    friend class User;
  };

  class _pof_User : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_User() : _OMNI_NS(proxyObjectFactory)(User::_PD_repoId) {}
    virtual ~_pof_User();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_User :
    public virtual omniServant
  {
  public:
    virtual ~_impl_User();

    virtual void receive(const char* author, const char* message) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


#ifndef __Chat_mServer__
#define __Chat_mServer__

  class Server;
  class _objref_Server;
  class _impl_Server;
  
  typedef _objref_Server* Server_ptr;
  typedef Server_ptr ServerRef;

  class Server_Helper {
  public:
    typedef Server_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_Server, Server_Helper> Server_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_Server,Server_Helper > Server_out;

#endif

  // interface Server
  class Server {
  public:
    // Declarations for this interface type.
    typedef Server_ptr _ptr_type;
    typedef Server_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_Server :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    ::CORBA::Boolean _cxx_register(::Chat::User_ptr u, const char* name);
    void quit(::Chat::User_ptr u);
    void send(::Chat::User_ptr u, const char* message);

    inline _objref_Server()  { _PR_setobj(0); }  // nil
    _objref_Server(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_Server();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_Server(const _objref_Server&);
    _objref_Server& operator = (const _objref_Server&);
    // not implemented

    friend class Server;
  };

  class _pof_Server : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_Server() : _OMNI_NS(proxyObjectFactory)(Server::_PD_repoId) {}
    virtual ~_pof_Server();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_Server :
    public virtual omniServant
  {
  public:
    virtual ~_impl_Server();

    virtual ::CORBA::Boolean _cxx_register(::Chat::User_ptr u, const char* name) = 0;
    virtual void quit(::Chat::User_ptr u) = 0;
    virtual void send(::Chat::User_ptr u, const char* message) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


_CORBA_MODULE_END



_CORBA_MODULE POA_Chat
_CORBA_MODULE_BEG

  class User :
    public virtual Chat::_impl_User,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~User();

    inline ::Chat::User_ptr _this() {
      return (::Chat::User_ptr) _do_this(::Chat::User::_PD_repoId);
    }
  };

  class Server :
    public virtual Chat::_impl_Server,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~Server();

    inline ::Chat::Server_ptr _this() {
      return (::Chat::Server_ptr) _do_this(::Chat::Server::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_Chat
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr



inline void
Chat::User::_marshalObjRef(::Chat::User_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
Chat::Server::_marshalObjRef(::Chat::Server_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_chat
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_chat
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_chat
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_chat
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_chat
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_chat
#endif

#endif  // __chat_hh__

