// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "chat.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



Chat::User_ptr Chat::User_Helper::_nil() {
  return ::Chat::User::_nil();
}

::CORBA::Boolean Chat::User_Helper::is_nil(::Chat::User_ptr p) {
  return ::CORBA::is_nil(p);

}

void Chat::User_Helper::release(::Chat::User_ptr p) {
  ::CORBA::release(p);
}

void Chat::User_Helper::marshalObjRef(::Chat::User_ptr obj, cdrStream& s) {
  ::Chat::User::_marshalObjRef(obj, s);
}

Chat::User_ptr Chat::User_Helper::unmarshalObjRef(cdrStream& s) {
  return ::Chat::User::_unmarshalObjRef(s);
}

void Chat::User_Helper::duplicate(::Chat::User_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

Chat::User_ptr
Chat::User::_duplicate(::Chat::User_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

Chat::User_ptr
Chat::User::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


Chat::User_ptr
Chat::User::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

Chat::User_ptr
Chat::User::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_User _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_User* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_User;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* Chat::User::_PD_repoId = "IDL:Chat/User:1.0";


Chat::_objref_User::~_objref_User() {
  
}


Chat::_objref_User::_objref_User(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::Chat::User::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
Chat::_objref_User::_ptrToObjRef(const char* id)
{
  if( id == ::Chat::User::_PD_repoId )
    return (::Chat::User_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::Chat::User::_PD_repoId) )
    return (::Chat::User_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring
class _0RL_cd_1522ABBAC0204E15_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1522ABBAC0204E15_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
};

void _0RL_cd_1522ABBAC0204E15_00000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_1522ABBAC0204E15_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

const char* const _0RL_cd_1522ABBAC0204E15_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_1522ABBAC0204E15_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1522ABBAC0204E15_00000000* tcd = (_0RL_cd_1522ABBAC0204E15_00000000*)cd;
  Chat::_impl_User* impl = (Chat::_impl_User*) svnt->_ptrToInterface(Chat::User::_PD_repoId);
  impl->receive(tcd->arg_0, tcd->arg_1);


}

void Chat::_objref_User::receive(const char* author, const char* message)
{
  _0RL_cd_1522ABBAC0204E15_00000000 _call_desc(_0RL_lcfn_1522ABBAC0204E15_10000000, "receive", 8);
  _call_desc.arg_0 = author;
  _call_desc.arg_1 = message;

  _invoke(_call_desc);



}
Chat::_pof_User::~_pof_User() {}


omniObjRef*
Chat::_pof_User::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::Chat::_objref_User(ior, id);
}


::CORBA::Boolean
Chat::_pof_User::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::Chat::User::_PD_repoId) )
    return 1;
  
  return 0;
}

const Chat::_pof_User _the_pof_Chat_mUser;

Chat::_impl_User::~_impl_User() {}


::CORBA::Boolean
Chat::_impl_User::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "receive") ) {

    _0RL_cd_1522ABBAC0204E15_00000000 _call_desc(_0RL_lcfn_1522ABBAC0204E15_10000000, "receive", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
Chat::_impl_User::_ptrToInterface(const char* id)
{
  if( id == ::Chat::User::_PD_repoId )
    return (::Chat::_impl_User*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::Chat::User::_PD_repoId) )
    return (::Chat::_impl_User*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
Chat::_impl_User::_mostDerivedRepoId()
{
  return ::Chat::User::_PD_repoId;
}

Chat::Server_ptr Chat::Server_Helper::_nil() {
  return ::Chat::Server::_nil();
}

::CORBA::Boolean Chat::Server_Helper::is_nil(::Chat::Server_ptr p) {
  return ::CORBA::is_nil(p);

}

void Chat::Server_Helper::release(::Chat::Server_ptr p) {
  ::CORBA::release(p);
}

void Chat::Server_Helper::marshalObjRef(::Chat::Server_ptr obj, cdrStream& s) {
  ::Chat::Server::_marshalObjRef(obj, s);
}

Chat::Server_ptr Chat::Server_Helper::unmarshalObjRef(cdrStream& s) {
  return ::Chat::Server::_unmarshalObjRef(s);
}

void Chat::Server_Helper::duplicate(::Chat::Server_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

Chat::Server_ptr
Chat::Server::_duplicate(::Chat::Server_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

Chat::Server_ptr
Chat::Server::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


Chat::Server_ptr
Chat::Server::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

Chat::Server_ptr
Chat::Server::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Server _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Server* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Server;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* Chat::Server::_PD_repoId = "IDL:Chat/Server:1.0";


Chat::_objref_Server::~_objref_Server() {
  
}


Chat::_objref_Server::_objref_Server(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::Chat::Server::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
Chat::_objref_Server::_ptrToObjRef(const char* id)
{
  if( id == ::Chat::Server::_PD_repoId )
    return (::Chat::Server_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::Chat::Server::_PD_repoId) )
    return (::Chat::Server_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cChat_mUser_i_cstring
class _0RL_cd_1522ABBAC0204E15_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1522ABBAC0204E15_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  Chat::User_var arg_0_;
  Chat::User_ptr arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_1522ABBAC0204E15_20000000::marshalArguments(cdrStream& _n)
{
  Chat::User::_marshalObjRef(arg_0,_n);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_1522ABBAC0204E15_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = Chat::User::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_1522ABBAC0204E15_20000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_1522ABBAC0204E15_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_1522ABBAC0204E15_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_1522ABBAC0204E15_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1522ABBAC0204E15_20000000* tcd = (_0RL_cd_1522ABBAC0204E15_20000000*)cd;
  Chat::_impl_Server* impl = (Chat::_impl_Server*) svnt->_ptrToInterface(Chat::Server::_PD_repoId);
  tcd->result = impl->_cxx_register(tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean Chat::_objref_Server::_cxx_register(::Chat::User_ptr u, const char* name)
{
  _0RL_cd_1522ABBAC0204E15_20000000 _call_desc(_0RL_lcfn_1522ABBAC0204E15_30000000, "register", 9);
  _call_desc.arg_0 = u;
  _call_desc.arg_1 = name;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cChat_mUser
class _0RL_cd_1522ABBAC0204E15_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1522ABBAC0204E15_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  Chat::User_var arg_0_;
  Chat::User_ptr arg_0;
};

void _0RL_cd_1522ABBAC0204E15_40000000::marshalArguments(cdrStream& _n)
{
  Chat::User::_marshalObjRef(arg_0,_n);

}

void _0RL_cd_1522ABBAC0204E15_40000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = Chat::User::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_1522ABBAC0204E15_40000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_1522ABBAC0204E15_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1522ABBAC0204E15_40000000* tcd = (_0RL_cd_1522ABBAC0204E15_40000000*)cd;
  Chat::_impl_Server* impl = (Chat::_impl_Server*) svnt->_ptrToInterface(Chat::Server::_PD_repoId);
  impl->alive(tcd->arg_0);


}

void Chat::_objref_Server::alive(::Chat::User_ptr u)
{
  _0RL_cd_1522ABBAC0204E15_40000000 _call_desc(_0RL_lcfn_1522ABBAC0204E15_50000000, "alive", 6);
  _call_desc.arg_0 = u;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_1522ABBAC0204E15_60000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1522ABBAC0204E15_40000000* tcd = (_0RL_cd_1522ABBAC0204E15_40000000*)cd;
  Chat::_impl_Server* impl = (Chat::_impl_Server*) svnt->_ptrToInterface(Chat::Server::_PD_repoId);
  impl->quit(tcd->arg_0);


}

void Chat::_objref_Server::quit(::Chat::User_ptr u)
{
  _0RL_cd_1522ABBAC0204E15_40000000 _call_desc(_0RL_lcfn_1522ABBAC0204E15_60000000, "quit", 5);
  _call_desc.arg_0 = u;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cChat_mUser_i_cstring
class _0RL_cd_1522ABBAC0204E15_70000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1522ABBAC0204E15_70000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  Chat::User_var arg_0_;
  Chat::User_ptr arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
};

void _0RL_cd_1522ABBAC0204E15_70000000::marshalArguments(cdrStream& _n)
{
  Chat::User::_marshalObjRef(arg_0,_n);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_1522ABBAC0204E15_70000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = Chat::User::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

const char* const _0RL_cd_1522ABBAC0204E15_70000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_1522ABBAC0204E15_80000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1522ABBAC0204E15_70000000* tcd = (_0RL_cd_1522ABBAC0204E15_70000000*)cd;
  Chat::_impl_Server* impl = (Chat::_impl_Server*) svnt->_ptrToInterface(Chat::Server::_PD_repoId);
  impl->send(tcd->arg_0, tcd->arg_1);


}

void Chat::_objref_Server::send(::Chat::User_ptr u, const char* message)
{
  _0RL_cd_1522ABBAC0204E15_70000000 _call_desc(_0RL_lcfn_1522ABBAC0204E15_80000000, "send", 5);
  _call_desc.arg_0 = u;
  _call_desc.arg_1 = message;

  _invoke(_call_desc);



}
Chat::_pof_Server::~_pof_Server() {}


omniObjRef*
Chat::_pof_Server::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::Chat::_objref_Server(ior, id);
}


::CORBA::Boolean
Chat::_pof_Server::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::Chat::Server::_PD_repoId) )
    return 1;
  
  return 0;
}

const Chat::_pof_Server _the_pof_Chat_mServer;

Chat::_impl_Server::~_impl_Server() {}


::CORBA::Boolean
Chat::_impl_Server::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "register") ) {

    _0RL_cd_1522ABBAC0204E15_20000000 _call_desc(_0RL_lcfn_1522ABBAC0204E15_30000000, "register", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "alive") ) {

    _0RL_cd_1522ABBAC0204E15_40000000 _call_desc(_0RL_lcfn_1522ABBAC0204E15_50000000, "alive", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "quit") ) {

    _0RL_cd_1522ABBAC0204E15_40000000 _call_desc(_0RL_lcfn_1522ABBAC0204E15_60000000, "quit", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "send") ) {

    _0RL_cd_1522ABBAC0204E15_70000000 _call_desc(_0RL_lcfn_1522ABBAC0204E15_80000000, "send", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
Chat::_impl_Server::_ptrToInterface(const char* id)
{
  if( id == ::Chat::Server::_PD_repoId )
    return (::Chat::_impl_Server*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::Chat::Server::_PD_repoId) )
    return (::Chat::_impl_Server*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
Chat::_impl_Server::_mostDerivedRepoId()
{
  return ::Chat::Server::_PD_repoId;
}

POA_Chat::User::~User() {}

POA_Chat::Server::~Server() {}

